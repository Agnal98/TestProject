package com.example.orcaadminservice_controller;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import com.example.orcaadminservice.controller.UserRoleController;
import com.example.orcaadminservice.dto.UserRoleDTO;
import com.example.orcaadminservice.repository.UserRoleRepository;
import com.example.orcaadminservice.service.UserRoleService;







@ExtendWith(MockitoExtension.class)
class UserRoleControllerTest {

	UserRoleController userRoleController;
    
	@Mock
	private UserRoleService userRoleService;
	@Mock
	private UserRoleRepository userRoleRepository;

	@BeforeEach
	void setUp() {
		userRoleController = new UserRoleController(userRoleService);
	}

	@Test
	void createUserRoleTest() {
		UserRoleDTO userRoleDto = new UserRoleDTO();
		userRoleDto.setId(1);
		userRoleDto.setUser("test4");
		
		when(userRoleService.createUserRole(userRoleDto)).thenReturn(userRoleDto);
		ResponseEntity<UserRoleDTO> userRoleDTO1 = userRoleController.createUserRole(userRoleDto);
		assertThat(userRoleDTO1.getBody().getId());
		
	}
	
	@Test
	void testAll() {
		ResponseEntity<List<UserRoleDTO>> userRoleDtoList = userRoleController.getUserRole();
		assertThat(userRoleDtoList.getBody().size() > 0);

	}

	@Test
	void findByIdTest() {
//		ResponseEntity<UserRoleDTO> userRoleDto = userRoleController.findById(1);
//		assertEquals(1, userRoleDto.getBody().getId());

		 UserRoleDTO userRoleDto=new UserRoleDTO();
        
		 userRoleDto.setUser("test2");
		 userRoleDto.setId(1);

         when(userRoleService.findById(1)).thenReturn(userRoleDto);
         ResponseEntity<UserRoleDTO>tasksDtoList=userRoleController.findById(1);

         assertEquals(1,userRoleDto.getId());

 }

	@Test
void findByUserTest() {
//
//		ResponseEntity<UserRoleDTO> userRoleDto1 = userRoleController.findByUser("test4");
//
//       
//      
//		 assertEquals("test4", userRoleDto1.getBody().getUser());
		UserRoleDTO userRoleDto=new UserRoleDTO();
		userRoleDto.setUser("test2");
		userRoleDto.setId(1);

        when(userRoleService.findByUser("test2")).thenReturn(userRoleDto);
        ResponseEntity<UserRoleDTO>tasksDtoList=userRoleController.findByUser("test2");

        assertEquals("test2",userRoleDto.getUser());

	}

	

	@Test
	void updateTest() {
		UserRoleDTO userRoleDTO = new UserRoleDTO();
		userRoleDTO.setId(1);	
		userRoleDTO.setUser("test5");
		when(userRoleService.updateUserRole(userRoleDTO)).thenReturn(userRoleDTO);
		ResponseEntity<UserRoleDTO> userRoleDTO1 = userRoleController.updateUserRole(userRoleDTO);
		assertEquals(1, userRoleDTO1.getBody().getId());
	}
	
	

	@Test
	void deleteTaskSetTest(){
		UserRoleDTO userRoleDTO = new UserRoleDTO();
		userRoleDTO.setId(1);	
		when(userRoleService.updateUserRole(userRoleDTO)).thenReturn(userRoleDTO);
        ResponseEntity<Map<String,String>>message=userRoleController.deleteUserRole(1);
        assertEquals(200,message.getStatusCodeValue());
    }


}
